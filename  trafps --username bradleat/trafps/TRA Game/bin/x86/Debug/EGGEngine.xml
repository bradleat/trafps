<?xml version="1.0"?>
<doc>
    <assembly>
        <name>EGGEngine</name>
    </assembly>
    <members>
        <member name="T:EGGEngine.Animation.BonePoseCollection">
            <summary>
            A collection of BonePose objects that represent the bone transforms of a model
            as affected by animations.
            </summary>
        </member>
        <member name="M:EGGEngine.Animation.BonePoseCollection.CopyAbsoluteTransformsTo(Microsoft.Xna.Framework.Matrix[])">
            <summary>
            Computes the absolute transforms for the collection and copies
            the values.
            </summary>
            <param name="transforms">The array into which the transforms will be 
            copied.</param>
        </member>
        <member name="P:EGGEngine.Animation.BonePoseCollection.Item(System.String)">
            <summary>
            Gets a BonePose object.
            </summary>
            <param name="boneName">The name of the bone for which the BonePose 
            will be returned.</param>
            <returns>The BonePose associated with the bone name.</returns>
        </member>
        <member name="T:EGGEngine.Animation.BonePose">
            <summary>
            Represents the current pose of a model bone.
            </summary>
        </member>
        <member name="M:EGGEngine.Animation.BonePose.GetHierarchy">
            <summary>
            Finds a collection of bones that represents the tree of BonePoses with
            the current BonePose as the root.
            </summary>
        </member>
        <member name="M:EGGEngine.Animation.BonePose.GetCurrentTransform">
            <summary>
            Calculates the current transform, based on the animations, for the bone
            represented by the BonePose object.
            </summary>
        </member>
        <member name="P:EGGEngine.Animation.BonePose.Children">
            <summary>
            Gets the immediate children of the current bone.
            </summary>
        </member>
        <member name="P:EGGEngine.Animation.BonePose.Parent">
            <summary>
            Gets the bone's parent.
            </summary>
        </member>
        <member name="P:EGGEngine.Animation.BonePose.Index">
            <summary>
            Gets the index of the bone.
            </summary>
        </member>
        <member name="P:EGGEngine.Animation.BonePose.Name">
            <summary>
            Gets the name of the bone.
            </summary>
        </member>
        <member name="P:EGGEngine.Animation.BonePose.CurrentController">
            <summary>
            Gets or sets the current animation that affects this bone.  If null,
            then DefaultTransform will be used for this bone's transform.
            </summary>
        </member>
        <member name="P:EGGEngine.Animation.BonePose.CurrentBlendController">
            <summary>
            Gets or sets the blend animation that affects this bone.  If the value
            is null, then no blending will occur.
            </summary>
        </member>
        <member name="P:EGGEngine.Animation.BonePose.BlendFactor">
            <summary>
            Gets or sets the amount to interpolate between the current animation and
            the current blend animation, if the current blend animation is not null
            </summary>
        </member>
        <member name="P:EGGEngine.Animation.BonePose.DefaultTransform">
            <summary>
            Represents the matrix used by the BonePose when it is not affected by
            an animation or when the animation does not contain a track for the bone.
            </summary>
        </member>
        <member name="T:EGGEngine.Animation.Content.PaletteEffectReader">
            <summary>
            Reads a BasicPaletteEffect from the content pipeline.
            </summary>
        </member>
        <member name="M:EGGEngine.Animation.Content.PaletteEffectReader.Read(Microsoft.Xna.Framework.Content.ContentReader,EGGEngine.Animation.BasicPaletteEffect)">
            <summary>
            Reads a BasicPaletteEffect.
            </summary>
            <param name="input">The input stream.</param>
            <param name="existingInstance">N/A.</param>
            <returns>A new instance of BasicPaletteEffec.t</returns>
        </member>
        <member name="T:EGGEngine.Animation.IAttachable">
            <summary>
            An object that can be attached to a BonePose.
            </summary>
        </member>
        <member name="P:EGGEngine.Animation.IAttachable.LocalTransform">
            <summary>
            The local transform of the object, before the transform of the attached bone is applied.
            </summary>
        </member>
        <member name="P:EGGEngine.Animation.IAttachable.CombinedTransform">
            <summary>
            The world space transform of the object as affected by the bone.
            </summary>
        </member>
        <member name="P:EGGEngine.Animation.IAttachable.AttachedBone">
            <summary>
            The bone to which the object is attached.
            </summary>
        </member>
        <member name="T:EGGEngine.Debug.FrameRateCounter">
            <summary>
            This is a game component that implements IUpdateable.
            </summary>
        </member>
        <member name="M:EGGEngine.Debug.FrameRateCounter.LoadContent">
            <summary>
            Loads the SpriteBatch and font.
            </summary>
        </member>
        <member name="M:EGGEngine.Debug.FrameRateCounter.Update(Microsoft.Xna.Framework.GameTime)">
            <summary>
            Updates the frame counter
            </summary>
            <param name="gameTime">The current game time</param>
        </member>
        <member name="M:EGGEngine.Debug.FrameRateCounter.Draw(Microsoft.Xna.Framework.GameTime)">
            <summary>
            Draws the frame counter to the screen
            </summary>
        </member>
        <member name="T:EGGEngine.Animation.InterpolationMethod">
            <summary>
            An interpolation method.
            </summary>
        </member>
        <member name="F:EGGEngine.Animation.InterpolationMethod.None">
            <summary>
            No interpolation.
            </summary>
        </member>
        <member name="F:EGGEngine.Animation.InterpolationMethod.Linear">
            <summary>
            Linear interpolation.
            </summary>
        </member>
        <member name="F:EGGEngine.Animation.InterpolationMethod.SplineBased">
            <summary>
            Spline based interpolation.  Higher quality than linear but more expensive.
            </summary>
        </member>
        <member name="T:EGGEngine.Animation.InterpolationController">
            <summary>
            A controller that performs interpolation during runtime.
            </summary>
        </member>
        <member name="T:EGGEngine.Animation.AnimationController">
            <summary>
            Controls an animation by advancing it's time and affecting
            bone transforms
            </summary>
        </member>
        <member name="T:EGGEngine.Animation.IAnimationController">
            <summary>
            An interface used by BonePose that allows an animation to affect the bone
            as a function of time.
            </summary>
        </member>
        <member name="M:EGGEngine.Animation.IAnimationController.GetCurrentBoneTransform(EGGEngine.Animation.BonePose)">
            <summary>
            Gets the current transform for the given BonePose object in the animation.
            This is only called when a bone pose is affected by the current animation.
            </summary>
            <param name="pose">The BonePose object querying for the current transform in
            the animation.</param>
            <returns>The current transform of the bone.</returns>
        </member>
        <member name="M:EGGEngine.Animation.IAnimationController.ContainsAnimationTrack(EGGEngine.Animation.BonePose)">
            <summary>
            Gets a value determining whether the animation can potentially affect the
            given BonePose.
            </summary>
            <param name="pose">The BonePose to test.</param>
            <returns>True if the animation can affect the bone and contains a track
            for it.</returns>
        </member>
        <member name="E:EGGEngine.Animation.IAnimationController.AnimationTracksChanged">
            <summary>
            Raised when the animation tracks have changed so that different bones are affect.
            </summary>
        </member>
        <member name="M:EGGEngine.Animation.AnimationController.#ctor(Microsoft.Xna.Framework.Game,EGGEngine.Animation.AnimationInfo)">
            <summary>
            Creates a new animation controller.
            </summary>
            <param name="game">The game to which this controller will be attached.</param>
            <param name="sourceAnimation">The source animation that the controller will use.
            This is stored in the ModelAnimator class.</param>
        </member>
        <member name="M:EGGEngine.Animation.AnimationController.OnAnimationEnded(System.EventArgs)">
            <summary>
            Called when the current animation reaches the end.
            </summary>
            <param name="args">The event args.</param>
        </member>
        <member name="M:EGGEngine.Animation.AnimationController.Update(Microsoft.Xna.Framework.GameTime)">
            <summary>
            Advances the current time in the animation.
            </summary>
            <param name="gameTime">Contains the time by which the animation will be advanced</param>
        </member>
        <member name="M:EGGEngine.Animation.AnimationController.GetCurrentBoneTransform(EGGEngine.Animation.BonePose)">
            <summary>
            Gets the current transform for the given BonePose object in the animation.
            This is only called when a bone pose is affected by the current animation.
            </summary>
            <param name="pose">The BonePose object querying for the current transform in
            the animation.</param>
            <returns>The current transform of the bone.</returns>
        </member>
        <member name="M:EGGEngine.Animation.AnimationController.ContainsAnimationTrack(EGGEngine.Animation.BonePose)">
            <summary>
            Returns true if the animation contains a track for the given BonePose.
            </summary>
            <param name="pose">The BonePose to test for track existence.</param>
            <returns>True if the animation contains a track for the given BonePose.</returns>
        </member>
        <member name="M:EGGEngine.Animation.AnimationController.OnAnimationTracksChanged(System.EventArgs)">
            <summary>
            Fired when the tracks change so that different bones can be affected by the controller.
            </summary>
            <param name="e">The event args.</param>
        </member>
        <member name="E:EGGEngine.Animation.AnimationController.AnimationEnded">
            <summary>
            Fired when the controller is not looping and the animation has ended.
            </summary>
        </member>
        <member name="P:EGGEngine.Animation.AnimationController.IsLooping">
            <summary>
            Gets or sets a value that determines if the animation is looping.
            </summary>
        </member>
        <member name="P:EGGEngine.Animation.AnimationController.Duration">
            <summary>
            Gets the total duration, in ticks, of the animation.
            </summary>
        </member>
        <member name="P:EGGEngine.Animation.AnimationController.AnimationSource">
            <summary>
            Gets the source animation that this controller is using.
            </summary>
        </member>
        <member name="P:EGGEngine.Animation.AnimationController.ElapsedTime">
            <summary>
            Gets or sets the elapsed time for the animation.
            </summary>
        </member>
        <member name="P:EGGEngine.Animation.AnimationController.SpeedFactor">
            <summary>
            Gets or sets the value that is multiplied by the time when it is
            advanced to determine the playback speed of the animation.
            </summary>
        </member>
        <member name="E:EGGEngine.Animation.AnimationController.AnimationTracksChanged">
            <summary>
            Fired when the animation tracks change and different bones are affected.
            </summary>
        </member>
        <member name="M:EGGEngine.Animation.InterpolationController.#ctor(Microsoft.Xna.Framework.Game,EGGEngine.Animation.AnimationInfo,EGGEngine.Animation.InterpolationMethod)">
            <summary>
            Creats a new InterpolationController.
            </summary>
            <param name="game">The game.</param>
            <param name="source">The source animation.</param>
            <param name="interpMethod">The interpolation method.</param>
        </member>
        <member name="M:EGGEngine.Animation.InterpolationController.GetCurrentBoneTransform(EGGEngine.Animation.BonePose)">
            <summary>
            Returns the current transform for a bone.
            </summary>
            <param name="pose">The bone.</param>
            <returns>The bone's current transform.</returns>
        </member>
        <member name="P:EGGEngine.Animation.InterpolationController.InterpolationMethod">
            <summary>
            Gets or sets the interpolation method.
            </summary>
        </member>
        <member name="T:EGGEngine.Audio.Audio">
            <summary>
            Audio class used for creating sounds/ background music in a game
            </summary>
        </member>
        <member name="M:EGGEngine.Audio.Audio.#ctor(System.String)">
            <summary>
            Initialises the Audio engine
            </summary>
            <param name="audioFilePath">A string containing the file path to your Xact file ( make sure to put ".xgs" at the end of the string i.e - "Content\\example.xgs"</param>
        </member>
        <member name="M:EGGEngine.Audio.Audio.GetCategory(System.String)">
            <summary>
            Used to get the category from the Xact file
            </summary>
            <param name="categoryname">A string of the name of the category i.e "Music"</param>
            <returns>Returns an AudioCategory</returns>
        </member>
        <member name="M:EGGEngine.Audio.Audio.GetCue(System.String)">
            <summary>
            Get the cue from the Xact file using a string. This should be the first line in your game, in Initialise() 
            </summary>
            <param name="sound"> A string of the name of the cue in your Xact file</param>
            <returns>Returns the cue of a given string from your Xact file</returns>
        </member>
        <member name="M:EGGEngine.Audio.Audio.Play(Microsoft.Xna.Framework.Audio.Cue,System.Boolean,Microsoft.Xna.Framework.Audio.AudioListener,Microsoft.Xna.Framework.Audio.AudioEmitter)">
            <summary>
            
            </summary>
            <param name="cue"></param>
            <param name="apply3d"></param>
            <param name="listener"></param>
            <param name="emitter"></param>
            <returns></returns>
        </member>
        <member name="T:EGGEngine.Animation.BoneKeyframeCollection">
            <summary>
            A collection of BoneKeyFrames that represents an animation track.
            </summary>
        </member>
        <member name="M:EGGEngine.Animation.BoneKeyframeCollection.GetIndexByTime(System.Int64)">
            <summary>
            Gets the index in the track at the given time.
            </summary>
            <param name="ticks">The time for which the index is found.</param>
            <returns>The index in the track at the given time.</returns>
        </member>
        <member name="P:EGGEngine.Animation.BoneKeyframeCollection.Duration">
            <summary>
            Gets the duration of the animation track.
            </summary>
        </member>
        <member name="P:EGGEngine.Animation.BoneKeyframeCollection.BoneName">
            <summary>
            Gets the name of the bone associated with the animation track.
            </summary>
        </member>
        <member name="T:EGGEngine.Animation.BoneKeyframe">
            <summary>
            Represents a keyframe in an animation track.
            </summary>
        </member>
        <member name="M:EGGEngine.Animation.BoneKeyframe.#ctor(Microsoft.Xna.Framework.Matrix,System.Int64)">
            <summary>
            Creats a new BoneKeyframe.
            </summary>
            <param name="transform">The transform for the keyframe.</param>
            <param name="time">The time in ticks for the keyframe.</param>
        </member>
        <member name="F:EGGEngine.Animation.BoneKeyframe.Transform">
            <summary>
            The transform for the keyframe.
            </summary>
        </member>
        <member name="F:EGGEngine.Animation.BoneKeyframe.Time">
            <summary>
            The time for the keyframe.
            </summary>
        </member>
        <member name="T:EGGEngine.Animation.AnimationChannelCollection">
            <summary>
            A collection of animation channels or tracks, which are sections of an
            animation that run for one bone.
            </summary>
        </member>
        <member name="P:EGGEngine.Animation.AnimationChannelCollection.Item(System.String)">
            <summary>
            Gets the BoneKeyframeCollection that is associated with the given bone.
            </summary>
            <param name="boneName">The name of the bone that contains a track in this
            AnimationChannelCollection.</param>
            <returns>The track associated with the given bone.</returns>
        </member>
        <member name="T:EGGEngine.Animation.AnimationInfo">
            <summary>
            Contains information about an animation.
            </summary>
        </member>
        <member name="M:EGGEngine.Animation.AnimationInfo.AffectsBone(System.String)">
            <summary>
            Returns true if the animation contains any tracks that affect the given
            bone.
            </summary>
            <param name="boneName">The bone to test for track information.</param>
            <returns>True if the animation contains any tracks that affect the given
            bone.</returns>
        </member>
        <member name="P:EGGEngine.Animation.AnimationInfo.AnimationChannels">
            <summary>
            Gets a collection of channels that represent the bone animation
            tracks for this animation.
            </summary>
        </member>
        <member name="P:EGGEngine.Animation.AnimationInfo.AffectedBones">
            <summary>
            Gets a collection of bones that have tracks in this animation.
            </summary>
        </member>
        <member name="P:EGGEngine.Animation.AnimationInfo.Duration">
            <summary>
            Gets the total duration of this animation in ticks.
            </summary>
        </member>
        <member name="P:EGGEngine.Animation.AnimationInfo.Name">
            <summary>
            Gets the name of the animation.
            </summary>
        </member>
        <member name="T:EGGEngine.Animation.AnimationInfoCollection">
            <summary>
            A collection of AnimationInfo objects.
            </summary>
        </member>
        <member name="M:EGGEngine.Animation.AnimationInfoCollection.FromModel(Microsoft.Xna.Framework.Graphics.Model)">
            <summary>
            Gets a collection of animations stored in the model.
            </summary>
            <param name="model">The model that contains the animations.</param>
            <returns>The animations stored in the model.</returns>
        </member>
        <member name="P:EGGEngine.Animation.AnimationInfoCollection.Item(System.Int32)">
            <summary>
            Gets the AnimationInfo object at the given index.
            </summary>
            <param name="index">The index of the AnimationInfo object.</param>
            <returns>The AnimationInfo object at the given index.</returns>
        </member>
        <member name="M:EGGEngine.Cameras.FPSCamera.Update(Microsoft.Xna.Framework.Input.MouseState,Microsoft.Xna.Framework.Vector3)">
            <summary>
            Updates the camera based on the current mouse state.
            </summary>
            <param name="currentMouseState">The current state of the mouse</param>
            <param name="modelPosition">The position of the model in 3D space</param>
        </member>
        <member name="M:EGGEngine.Cameras.FPSCamera.AddToCameraPosition(Microsoft.Xna.Framework.Vector3,System.Single,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.GameTime,System.Boolean)">
            <summary>
            Helper method that enables moving based on the camera's current
            heading.
            </summary>
            <param name="vectorToAdd">The direction being applied</param>
            <param name="position">The position of the model</param>
        </member>
        <member name="M:EGGEngine.Cameras.FPSCamera.UpdateViewMatrix(System.Boolean)">
            <summary>
            Updates the view matrix accordingly.
            </summary>
        </member>
        <member name="M:EGGEngine.Cameras.FPSCamera.UpdateModelView(Microsoft.Xna.Framework.Matrix)">
            <summary>
            Updates the camera position based on the position and offset
            of the model.  Makes it seem like we are viewing from the model's
            point of view.
            </summary>
            <param name="rotation">The current rotation of the camera</param>
        </member>
        <member name="T:EGGEngine.Awards.AwardUnlockedEventArgs">
            <summary>
            A simple event argument class fired when an achievement is unlocked.
            </summary>
        </member>
        <member name="M:EGGEngine.Awards.AwardUnlockedEventArgs.#ctor(EGGEngine.Awards.Award,System.String)">
            <summary>
            Creates a new AwardUnlockedEventArgs with the given award.
            </summary>
            <param name="award">The award that was unlocked.</param>
            <param name="gamertag">The gamer who unlocked it.</param>
        </member>
        <member name="P:EGGEngine.Awards.AwardUnlockedEventArgs.Award">
            <summary>
            Gets the Award that was unlocked.
            </summary>
        </member>
        <member name="P:EGGEngine.Awards.AwardUnlockedEventArgs.Gamertag">
            <summary>
            Gets the gamer who unlocked the award.
            </summary>
        </member>
        <member name="M:EGGEngine.Rendering.DrawableModel.Draw(EGGEngine.Cameras.FPSCamera)">
            <summary>
            Draws the model in 3D space using the current camera's view matrix 
            and projection matrix.
            </summary>
            <param name="camera">The current camera being used</param>
        </member>
        <member name="M:EGGEngine.Rendering.DrawableModel.LoadModelBoundingSphere">
            <summary>
            Loads the bounding sphere of the model into it's tag.
            </summary>
        </member>
        <member name="M:EGGEngine.Rendering.DrawableModel.WriteModelStructure(Microsoft.Xna.Framework.Graphics.Model)">
            <summary>
            Debugging method that writes the structure of the model into
            a text file, including bone names, mesh names, and indices of each.
            </summary>
            <param name="model">The model being used</param>
        </member>
        <member name="M:EGGEngine.Rendering.DrawableModel.WriteBone(Microsoft.Xna.Framework.Graphics.ModelBone,System.Int32,System.IO.StreamWriter)">
            <summary>
            Debugging method that handles the writing of the bone structure.
            </summary>
            <param name="bone">The current bone</param>
            <param name="level">The level in the bone structure (number of tabs)</param>
            <param name="writer">The stream writer used to write the information
            to a text file</param>
        </member>
        <member name="M:EGGEngine.Rendering.DrawableModel.WriteModelMesh(System.Int32,Microsoft.Xna.Framework.Graphics.ModelMesh,System.IO.StreamWriter)">
            <summary>
            Debugging method that handles the writing of the mesh structure.
            </summary>
            <param name="ID">The index of the current mesh</param>
            <param name="mesh">The current mesh</param>
            <param name="writer">The stream writer used to write the information
            to a text file</param>
        </member>
        <member name="T:EGGEngine.Animation.EffectInstancedAnimator">
            <summary>
            A subclass of ModelAnimator that uses effects cloned from the model instead of
            directly from the model.
            </summary>
        </member>
        <member name="T:EGGEngine.Animation.ModelAnimator">
            <summary>
            Animates and draws a model that was processed with AnimatedModelProcessor
            </summary>
        </member>
        <member name="M:EGGEngine.Animation.ModelAnimator.#ctor(Microsoft.Xna.Framework.Game,Microsoft.Xna.Framework.Graphics.Model)">
            <summary>
            Creates a new instance of ModelAnimator.
            </summary>
            <param name="game">The game to which this component will belong.</param>
            <param name="model">The model to be animated.</param>
        </member>
        <member name="M:EGGEngine.Animation.ModelAnimator.GetMeshSkinInfo(System.Int32)">
            <summary>
            Returns skinning information for a mesh.
            </summary>
            <param name="index">The index of the mesh.</param>
            <returns>Skinning information for the mesh.</returns>
        </member>
        <member name="M:EGGEngine.Animation.ModelAnimator.CreateEffectList">
            <summary>
            Called during creation and calls to InitializeEffectParams.  Returns the list of
            effects used during rendering.
            </summary>
            <returns>A flattened list of effects used during rendering, one for each ModelMeshPart</returns>
        </member>
        <member name="M:EGGEngine.Animation.ModelAnimator.InitializeEffectParams">
            <summary>
            Initializes the effect parameters.  Should be called after the effects
            on the model are changed.
            </summary>
        </member>
        <member name="M:EGGEngine.Animation.ModelAnimator.Update(Microsoft.Xna.Framework.GameTime)">
            <summary>
            Updates the animator by finding the current absolute transforms.
            </summary>
            <param name="gameTime">The GameTime.</param>
        </member>
        <member name="M:EGGEngine.Animation.ModelAnimator.CopyAbsoluteTransformsTo(Microsoft.Xna.Framework.Matrix[])">
            <summary>
            Copies the current absolute transforms to the specified array.
            </summary>
            <param name="transforms">The array to which the transforms will be copied.</param>
        </member>
        <member name="M:EGGEngine.Animation.ModelAnimator.GetAbsoluteTransform(System.Int32)">
            <summary>
            Gets the current absolute transform for the given bone index.
            </summary>
            <param name="boneIndex"></param>
            <returns>The current absolute transform for the bone index.</returns>
        </member>
        <member name="M:EGGEngine.Animation.ModelAnimator.Draw(Microsoft.Xna.Framework.GameTime)">
            <summary>
            Draws the current frame
            </summary>
            <param name="gameTime">The game time</param>
        </member>
        <member name="P:EGGEngine.Animation.ModelAnimator.World">
            <summary>
            Gets or sets the world matrix for the animation scene.
            </summary>
        </member>
        <member name="P:EGGEngine.Animation.ModelAnimator.EffectCount">
            <summary>
            Returns the number of effects used by the model, one for each ModelMeshPart
            </summary>
        </member>
        <member name="P:EGGEngine.Animation.ModelAnimator.Model">
            <summary>
            Gets the model associated with this controller.
            </summary>
        </member>
        <member name="P:EGGEngine.Animation.ModelAnimator.Animations">
            <summary>
            Gets the animations that were loaded in from the content pipeline
            for this model.
            </summary>
        </member>
        <member name="P:EGGEngine.Animation.ModelAnimator.Effects">
            <summary>
            Gets a collection of effects, one per ModelMeshPart, that are used by 
            the ModelAnimator. The first index of the collection corresponds to the
            effect used to draw the first ModelMeshPart of the first Mesh, and the 
            last index corresponds to the effect used to drwa the last ModelMeshPart
            of the last Mesh.
            </summary>
        </member>
        <member name="P:EGGEngine.Animation.ModelAnimator.AttachedObjects">
            <summary>
            Gets a list of objects that are attached to a bone in the model.
            </summary>
        </member>
        <member name="P:EGGEngine.Animation.ModelAnimator.BonePoses">
            <summary>
            Gets the BonePoses associated with this ModelAnimator.
            </summary>
        </member>
        <member name="M:EGGEngine.Animation.EffectInstancedAnimator.#ctor(Microsoft.Xna.Framework.Game,Microsoft.Xna.Framework.Graphics.Model)">
            <summary>
            Creates a new EffectInstancedAnimator.
            </summary>
            <param name="game">The game.</param>
            <param name="model">The model.</param>
        </member>
        <member name="M:EGGEngine.Animation.EffectInstancedAnimator.CreateEffectList">
            <summary>
            Creates a list of effects that are cloned from the model's current effects.
            </summary>
            <returns>A list of effects that are cloned from the model's current effects.</returns>
        </member>
        <member name="T:EGGEngine.Rendering.Sky">
            <summary>
            Runtime class for loading and rendering a textured skydome
            that was created during the build process by the SkyProcessor.
            </summary>
        </member>
        <member name="M:EGGEngine.Rendering.Sky.#ctor(Microsoft.Xna.Framework.Content.ContentReader)">
            <summary>
            Constructor is internal: this should only ever
            be called by the SkyReader class.
            </summary>
        </member>
        <member name="M:EGGEngine.Rendering.Sky.Draw(Microsoft.Xna.Framework.Matrix,Microsoft.Xna.Framework.Matrix)">
            <summary>
            Helper for drawing the skydome mesh.
            </summary>
        </member>
        <member name="T:EGGEngine.Rendering.SkyReader">
            <summary>
            Helper for reading a Sky object from the compiled XNB format.
            </summary>
        </member>
        <member name="T:EGGEngine.Awards.Award">
            <summary>
            Represents a single Award the user can unlock.
            </summary>
        </member>
        <member name="M:EGGEngine.Awards.Award.#ctor">
            <summary>
            Default constructor. Give default values to prevent division by zero.
            </summary>
        </member>
        <member name="M:EGGEngine.Awards.Award.LoadTexture(Microsoft.Xna.Framework.Content.ContentManager)">
            <summary>
            Loads the texture to represent the award.
            </summary>
            <param name="content">The ContentManager to use for loading.</param>
        </member>
        <member name="P:EGGEngine.Awards.Award.Name">
            <summary>
            Gets or sets the name of the Award.
            </summary>
        </member>
        <member name="P:EGGEngine.Awards.Award.TextureAssetName">
            <summary>
            Gets or sets the asset name for the texture. Each texture will be fit into
            a 64x64 area so being square is ideal.
            </summary>
        </member>
        <member name="P:EGGEngine.Awards.Award.Texture">
            <summary>
            Gets the texture for the Award.
            </summary>
        </member>
        <member name="P:EGGEngine.Awards.Award.ProgressNeeded">
            <summary>
            Gets or sets the progress points needed to unlock the award.
            </summary>
        </member>
        <member name="P:EGGEngine.Awards.Award.ProgressIncrement">
            <summary>
            Gets or sets the progress point increment between each award notification.
            </summary>
        </member>
        <member name="M:EGGEngine.Helpers.InputHelper.KeyDown(Microsoft.Xna.Framework.Input.Keys)">
            <summary>
            Returns true if the given key is pressed and false otherwise.
            </summary>
            <param name="key">Key being checked</param>
            <returns>Boolean value representing whether the key is down or not</returns>
        </member>
        <member name="M:EGGEngine.Helpers.InputHelper.KeysDown(Microsoft.Xna.Framework.Input.Keys[])">
            <summary>
            Returns true if the given array of keys are all pressed and 
            false otherwise.
            </summary>
            <param name="keys">Array of keys being checked</param>
            <returns>Boolean value representing whether the keys are down or not</returns>
        </member>
        <member name="M:EGGEngine.Helpers.InputHelper.ButtonDown(Microsoft.Xna.Framework.Input.Buttons)">
            <summary>
            Returns true if the given button is pressed and false otherwise
            </summary>
            <param name="button">Button being checked</param>
            <returns>Boolean value representing whether the button is down or not</returns>
        </member>
        <member name="M:EGGEngine.Helpers.InputHelper.ButtonsDown(Microsoft.Xna.Framework.Input.Buttons[])">
            <summary>
            Returns true if all of the given buttons are pressed and false
            otherwise.
            </summary>
            <param name="buttons">Array of buttons being checked</param>
            <returns>Boolean value representing whether the buttons are down or not</returns>
        </member>
        <member name="M:EGGEngine.Helpers.InputHelper.SetVibration(System.Single,System.Single)">
            <summary>
            Sets the vibration.
            </summary>
            <param name="leftMotor">Low frequency vibration</param>
            <param name="rightMotor">High frequency vibration</param>
        </member>
        <member name="M:EGGEngine.Helpers.InputHelper.GetThumbstickX(System.String)">
            <summary>
            Returns the X value of the thumbstick being used.
            </summary>
            <param name="thumbstick">The thumbstick being manipulated</param>
            <returns>Float value representing the direction the thumbstick is being pushed in the x direction</returns>
        </member>
        <member name="M:EGGEngine.Helpers.InputHelper.GetThumbstickY(System.String)">
            <summary>
            Returns the Y value of the thumbstick being used.
            </summary>
            <param name="thumbstick">The thumbstick being manipulated</param>
            <returns>Float value representing the direction the thumbstick is being pushed in the y direction</returns>
        </member>
        <member name="T:EGGEngine.Awards.AwardsComponent">
            <summary>
            Contains all the awards for the game and manages everything about them. 
            Uses the Guide.NotificationPosition when drawing the announcements.
            </summary>
        </member>
        <member name="M:EGGEngine.Awards.AwardsComponent.#ctor(Microsoft.Xna.Framework.Game)">
            <summary>
            Creates a new AwardsComponent for the given game.
            </summary>
            <param name="game">The Game in which the component will run.</param>
        </member>
        <member name="M:EGGEngine.Awards.AwardsComponent.GetGamertagPosition(Microsoft.Xna.Framework.Rectangle,System.String)">
            <summary>
            Gets the location where to draw the gamertag.
            </summary>
            <param name="announcementBounds">The announcement bounds.</param>
            <param name="gamertag">The gamertag.</param>
            <returns>The new Vector2 position for the gamertag.</returns>
        </member>
        <member name="M:EGGEngine.Awards.AwardsComponent.GetNamePosition(Microsoft.Xna.Framework.Rectangle)">
            <summary>
            Gets the location where to draw the award name.
            </summary>
            <param name="announcementBounds">The announcement bounds.</param>
            <returns>The new Vector2 position for the award name.</returns>
        </member>
        <member name="M:EGGEngine.Awards.AwardsComponent.GetMessagePosition(Microsoft.Xna.Framework.Rectangle,System.String)">
            <summary>
            Gets the location where to draw the award message.
            </summary>
            <param name="announcementBounds">The announcement bounds.</param>
            <param name="message">The award message.</param>
            <returns>The new Vector2 position for the award message.</returns>
        </member>
        <member name="M:EGGEngine.Awards.AwardsComponent.GetTextPosition(Microsoft.Xna.Framework.Rectangle,System.String,System.Int32,System.Int32)">
            <summary>
            Gets the location where to draw text in an award notification.
            </summary>
            <param name="announcementBounds">The announcement bounds.</param>
            <param name="text">The text to display.</param>
            <param name="centerX">Horizontal center of where to render.</param>
            <param name="centerY">Vertical center of where to render.</param>
            <returns>The new Vector2 position for the text.</returns>
        </member>
        <member name="M:EGGEngine.Awards.AwardsComponent.GetIconBounds(Microsoft.Xna.Framework.Rectangle)">
            <summary>
            Gets the bounds for the award icon.
            </summary>
            <param name="announcementBounds">The announcement bounds.</param>
            <returns>The new Rectangle bounds for the award icon.</returns>
        </member>
        <member name="M:EGGEngine.Awards.AwardsComponent.CalculateAnnouncementBounds">
            <summary>
            Calculates the bounds for the announcement based on the Guide.NotificationPosition property
            </summary>
            <returns>The new Rectangle bounds for the announcement.</returns>
        </member>
        <member name="M:EGGEngine.Awards.AwardsComponent.GetAwardProgress(EGGEngine.Awards.Award,System.String,System.Boolean)">
            <summary>
            Helper function. Acquires the AwardProgress for the given award and gamer.
            </summary>
            <param name="award">The award to search for.</param>
            <param name="gamertag">The gamer unlocking the award.</param>
            <param name="makeIfNotFound">
            True if a new AwardProgress should be created if it does not exist.
            </param>
            <returns>The appropriate AwardProgress object, or null if not found or created.</returns>
        </member>
        <member name="M:EGGEngine.Awards.AwardsComponent.GetAwardByName(System.String)">
            <summary>
            Retrieves an award by name.
            </summary>
            <param name="name">The name of the award to retrieve.</param>
            <returns>The Award instance if a match was found, null otherwise.</returns>
        </member>
        <member name="M:EGGEngine.Awards.AwardsComponent.IsAwardUnlocked(EGGEngine.Awards.Award,System.String)">
            <summary>
            Determines if a given award has been unlocked.
            </summary>
            <param name="award"></param>
            <param name="gamertag"></param>
            <returns></returns>
        </member>
        <member name="M:EGGEngine.Awards.AwardsComponent.UnlockAward(EGGEngine.Awards.Award,System.String)">
            <summary>
            Unlocks an award.
            </summary>
            <param name="award">The award to unlock.</param>
            <param name="gamertag">The gamer who unlocked the award.</param>
        </member>
        <member name="M:EGGEngine.Awards.AwardsComponent.AddAwardProgress(EGGEngine.Awards.Award,System.String,System.Int32)">
            <summary>
            Adds progress points to an award for a gamer, unlocking it if needed.
            </summary>
            <param name="award">The award to add progress.</param>
            <param name="gamertag">The gamer progressing the award.</param>
            <param name="progress">The number of progress points obtained.</param>
        </member>
        <member name="M:EGGEngine.Awards.AwardsComponent.SaveAwardProgress(System.String)">
            <summary>
            Saves a list of the unlocked award names to a file. This is not the best
            route on Windows where a user could easily edit the file, but on Xbox
            it is sufficient given that the hard drive is not easily accessible.
            </summary>
            <param name="file">The file path to which the data is saved.</param>
        </member>
        <member name="M:EGGEngine.Awards.AwardsComponent.LoadAwardProgress(System.String)">
            <summary>
            Loads a list of unlocked award names from a file.
            </summary>
            <param name="file">The file path from which the data is read.</param>
        </member>
        <member name="P:EGGEngine.Awards.AwardsComponent.Awards">
            <summary>
            Gets the list of all awards in the game.
            </summary>
        </member>
        <member name="E:EGGEngine.Awards.AwardsComponent.AwardUnlocked">
            <summary>
            Raised when an award is unlocked.
            </summary>
            <remarks>
            The event is useful for games that unlock special content when awards
            are unlocked. This allows games to unlock awards from anywhere and have
            a single location listen for the events to respond accordingly.
            </remarks>
        </member>
        <member name="T:EGGEngine.Animation.BasicPaletteEffect">
            <summary>
            Provides functionality similar to that of BasicEffect, but uses a 
            Matrix Palette.
            </summary>
        </member>
        <member name="F:EGGEngine.Animation.BasicPaletteEffect.PALETTE_SIZE">
            <summary>
            The max number of bones in the effect's matrix palette.
            </summary>
        </member>
        <member name="M:EGGEngine.Animation.BasicPaletteEffect.EnableDefaultLighting">
            <summary>
            Enables the default lighting for this effect.
            </summary>
        </member>
        <member name="M:EGGEngine.Animation.BasicPaletteEffect.Clone(Microsoft.Xna.Framework.Graphics.GraphicsDevice)">
            <summary>
            Clones the current BasicPaletteEffect class.
            </summary>
            <param name="device">The device to contain the new instance.</param>
            <returns>A clone of the current instance.</returns>
        </member>
        <member name="M:EGGEngine.Animation.BasicPaletteEffect.SetParamsFromBasicEffect(Microsoft.Xna.Framework.Graphics.BasicEffect)">
            <summary>
            Sets the parameters of this effect from a BasicEffect instance.
            </summary>
            <param name="effect">An instance containing the parameters to be copied.</param>
        </member>
        <member name="P:EGGEngine.Animation.BasicPaletteEffect.Texture">
            <summary>
            Gets or sets the texture associated with this effect.
            </summary>
        </member>
        <member name="P:EGGEngine.Animation.BasicPaletteEffect.FogStart">
            <summary>
            Gets or sets the vertex fog start distance.
            </summary>
        </member>
        <member name="P:EGGEngine.Animation.BasicPaletteEffect.FogEnd">
            <summary>
            Gets or sets the vertex fog end distance.
            </summary>
        </member>
        <member name="P:EGGEngine.Animation.BasicPaletteEffect.FogEnabled">
            <summary>
            Gets or sets a value enabling the fog. 
            </summary>
        </member>
        <member name="P:EGGEngine.Animation.BasicPaletteEffect.FogColor">
            <summary>
            Gets or sets the fog color.
            </summary>
        </member>
        <member name="P:EGGEngine.Animation.BasicPaletteEffect.Alpha">
            <summary>
            Gets or sets the alhpa blending value.
            </summary>
        </member>
        <member name="P:EGGEngine.Animation.BasicPaletteEffect.TextureEnabled">
            <summary>
            Gets or sets a value enabling the textures.
            </summary>
        </member>
        <member name="P:EGGEngine.Animation.BasicPaletteEffect.MatrixPalette">
            <summary>
            Gets or sets the bone palette values.
            </summary>
        </member>
        <member name="P:EGGEngine.Animation.BasicPaletteEffect.DirectionalLight0">
            <summary>
            Gets directional light zero.
            </summary>
        </member>
        <member name="P:EGGEngine.Animation.BasicPaletteEffect.DirectionalLight1">
            <summary>
            Gets directional light one.
            </summary>
        </member>
        <member name="P:EGGEngine.Animation.BasicPaletteEffect.DirectionalLight2">
            <summary>
            Gets directional light two.
            </summary>
        </member>
        <member name="P:EGGEngine.Animation.BasicPaletteEffect.AmbientLightColor">
            <summary>
            Gets or sets the additive ambient color of this effect.
            </summary>
        </member>
        <member name="P:EGGEngine.Animation.BasicPaletteEffect.SpecularColor">
            <summary>
            Gets or sets the specular color of this effect.
            </summary>
        </member>
        <member name="P:EGGEngine.Animation.BasicPaletteEffect.SpecularPower">
            <summary>
            Gets or sets the specular power of this effect.
            </summary>
        </member>
        <member name="P:EGGEngine.Animation.BasicPaletteEffect.DiffuseColor">
            <summary>
            Gets or sets the diffuse color of this effect.
            </summary>
        </member>
        <member name="P:EGGEngine.Animation.BasicPaletteEffect.LightingEnabled">
            <summary>
            Enables or disables lighting.
            </summary>
        </member>
        <member name="P:EGGEngine.Animation.BasicPaletteEffect.EmissiveColor">
            <summary>
            Gets or sets the emissive color of this effect.
            </summary>
        </member>
        <member name="P:EGGEngine.Animation.BasicPaletteEffect.World">
            <summary>
            Gets or sets the world matrix of this effect.
            </summary>
        </member>
        <member name="P:EGGEngine.Animation.BasicPaletteEffect.View">
            <summary>
            Gets or sets the view matrix of this effect.
            </summary>
        </member>
        <member name="P:EGGEngine.Animation.BasicPaletteEffect.Projection">
            <summary>
            Gets or sets the projection matrix of this effect.
            </summary>
        </member>
        <member name="T:EGGEngine.Animation.BasicPaletteEffect.BasicDirectionalLight">
            <summary>
            A basic directional light that uses phong shading.
            </summary>
        </member>
        <member name="P:EGGEngine.Animation.BasicPaletteEffect.BasicDirectionalLight.Enabled">
            <summary>
            Enables or disables this light.
            </summary>
        </member>
        <member name="P:EGGEngine.Animation.BasicPaletteEffect.BasicDirectionalLight.Direction">
            <summary>
            Gets or sets the direction of this light.
            </summary>
        </member>
        <member name="P:EGGEngine.Animation.BasicPaletteEffect.BasicDirectionalLight.SpecularColor">
            <summary>
            Gets or sets the specular color of this light.
            </summary>
        </member>
        <member name="P:EGGEngine.Animation.BasicPaletteEffect.BasicDirectionalLight.DiffuseColor">
            <summary>
            Gets or sets the diffuse color of this light.
            </summary>
        </member>
        <member name="T:EGGEngine.Animation.SkinningType">
            <summary>
            Info on how a model is skinned.
            </summary>
        </member>
        <member name="F:EGGEngine.Animation.SkinningType.None">
            <summary>
            No skinning.
            </summary>
        </member>
        <member name="F:EGGEngine.Animation.SkinningType.FourBonesPerVertex">
            <summary>
            A max of four influences per vertex.
            </summary>
        </member>
        <member name="F:EGGEngine.Animation.SkinningType.EightBonesPerVertex">
            <summary>
            A max of eight influences per vertex.
            </summary>
        </member>
        <member name="F:EGGEngine.Animation.SkinningType.TwelveBonesPerVertex">
            <summary>
            A max of twelve influences per vertex.
            </summary>
        </member>
        <member name="T:EGGEngine.Animation.Util">
            <summary>
            Provides various animation utilities.
            </summary>
        </member>
        <member name="F:EGGEngine.Animation.Util.TICKS_PER_60FPS">
            <summary>
            Ticks per frame at 60 frames per second.
            </summary>
        </member>
        <member name="M:EGGEngine.Animation.Util.GetSkinningType(Microsoft.Xna.Framework.Graphics.VertexElement[])">
            <summary>
            Gets info on what skinning info a vertex element array contains.
            </summary>
            <param name="elements">The vertex elements.</param>
            <returns>Info on what type of skinning the elements contain.</returns>
        </member>
        <member name="M:EGGEngine.Animation.Util.ReflectMatrix(Microsoft.Xna.Framework.Matrix@)">
            <summary>
            Reflects a matrix across the Z axis by multiplying both the Z
            column and the Z row by -1 such that the Z,Z element stays intact.
            </summary>
            <param name="m">The matrix to be reflected across the Z axis</param>
        </member>
        <member name="M:EGGEngine.Animation.Util.Convert``1(System.Byte[],System.Int32,Microsoft.Xna.Framework.Graphics.GraphicsDevice)">
            <summary>
            Converts from an array of bytes to any vertex type.
            </summary>
            <typeparam name="T">The type of vertex to which we are converting the bytes</typeparam>
            <param name="data">The bytes that will be converted to the vertices</param>
            <param name="vertexSize">The size of one vertex</param>
            <param name="device">Any working device; required to use our conversion hack</param>
            <returns>An array of the converted vertices</returns>
        </member>
        <member name="M:EGGEngine.Animation.Util.SlerpMatrix(Microsoft.Xna.Framework.Matrix,Microsoft.Xna.Framework.Matrix,System.Single)">
            <summary>
            Roughly decomposes two matrices and performs spherical linear interpolation
            </summary>
            <param name="start">Source matrix for interpolation</param>
            <param name="end">Destination matrix for interpolation</param>
            <param name="slerpAmount">Ratio of interpolation</param>
            <returns>The interpolated matrix</returns>
        </member>
        <member name="M:EGGEngine.Animation.Util.SlerpMatrix(Microsoft.Xna.Framework.Matrix@,Microsoft.Xna.Framework.Matrix@,System.Single,Microsoft.Xna.Framework.Matrix@)">
            <summary>
            Roughly decomposes two matrices and performs spherical linear interpolation
            </summary>
            <param name="start">Source matrix for interpolation</param>
            <param name="end">Destination matrix for interpolation</param>
            <param name="slerpAmount">Ratio of interpolation</param>
            <param name="result">Stores the result of hte interpolation.</param>
        </member>
        <member name="M:EGGEngine.Animation.Util.IsSkinned(Microsoft.Xna.Framework.Graphics.ModelMeshPart)">
            <summary>
            Determines whether or not a ModelMeshPart is skinned.
            </summary>
            <param name="meshPart">The part to check.</param>
            <returns>True if the part is skinned.</returns>
        </member>
        <member name="M:EGGEngine.Animation.Util.IsSkinned(Microsoft.Xna.Framework.Graphics.ModelMesh)">
            <summary>
            Determines whether or not a ModelMesh is skinned.
            </summary>
            <param name="mesh">The mesh to check.</param>
            <returns>True if the mesh is skinned.</returns>
        </member>
        <member name="M:EGGEngine.Animation.Util.IsSkinned(Microsoft.Xna.Framework.Graphics.Model)">
            <summary>
            Determines whether or not a Model is skinned.
            </summary>
            <param name="model">The model to check.</param>
            <returns>True if the model is skinned.</returns>
        </member>
        <member name="T:EGGEngine.Awards.AwardProgress">
            <summary>
            Records a gamer's progress toward unlocking an award.
            </summary>
        </member>
        <member name="P:EGGEngine.Awards.AwardProgress.Award">
            <summary>
            Gets or sets the award that is being unlocked.
            </summary>
        </member>
        <member name="P:EGGEngine.Awards.AwardProgress.Gamertag">
            <summary>
            Gets or sets the gamertag of the gamer unlocking the award.
            </summary>
        </member>
        <member name="P:EGGEngine.Awards.AwardProgress.Progress">
            <summary>
            Gets or sets the progress points acquired for the award.
            </summary>
        </member>
        <member name="P:EGGEngine.Awards.AwardProgress.IsUnlocked">
            <summary>
            Returns true if the award is unlocked by the gamer, false otherwise.
            </summary>
        </member>
        <member name="T:EGGEngine.Animation.Visualisation.CubeComponent">
            <summary>
            A cube component to assist in visualization of drawable objects.
            </summary>
        </member>
        <member name="M:EGGEngine.Animation.Visualisation.CubeComponent.#ctor(Microsoft.Xna.Framework.Game,Microsoft.Xna.Framework.Graphics.Color,System.Single)">
            <summary>
            Creats a new CubeComponent.
            </summary>
            <param name="game">The game to which this component will be attached.</param>
            <param name="color">The color of the cube.</param>
            <param name="sideLength">The length of one side of the cube.</param>
        </member>
        <member name="M:EGGEngine.Animation.Visualisation.CubeComponent.Dispose(System.Boolean)">
            <summary>
            Immediately releases unmanaged resources.
            </summary>
            <param name="disposing">False if managed resources should not be disposed.</param>
        </member>
        <member name="M:EGGEngine.Animation.Visualisation.CubeComponent.Draw(Microsoft.Xna.Framework.GameTime)">
            <summary>
            Draws the cube.
            </summary>
            <param name="gameTime">The game time.</param>
        </member>
        <member name="P:EGGEngine.Animation.Visualisation.CubeComponent.World">
            <summary>
            Gets or sets the world matrix.
            </summary>
        </member>
        <member name="P:EGGEngine.Animation.Visualisation.CubeComponent.View">
            <summary>
            Gets or sets the view matrix.
            </summary>
        </member>
        <member name="P:EGGEngine.Animation.Visualisation.CubeComponent.Projection">
            <summary>
            Gets or sets the projection matrix.
            </summary>
        </member>
        <member name="P:EGGEngine.Animation.Visualisation.CubeComponent.Color">
            <summary>
            Gets or sets the color of the cube.
            </summary>
        </member>
        <member name="P:EGGEngine.Animation.Visualisation.CubeComponent.BoundingBox">
            <summary>
            Gets the bounding box of the cube in world space.
            </summary>
        </member>
        <member name="P:EGGEngine.Animation.Visualisation.CubeComponent.LocalTransform">
            <summary>
            Gets or sets the local transform of the cube, before it as affected by the attached bone.
            </summary>
        </member>
        <member name="P:EGGEngine.Animation.Visualisation.CubeComponent.EGGEngine#Animation#IAttachable#CombinedTransform">
            <summary>
            Gets or sets the combined transform in world coordinates.
            </summary>
        </member>
        <member name="P:EGGEngine.Animation.Visualisation.CubeComponent.AttachedBone">
            <summary>
            Gets or sets the bone to which this cube is attached.
            </summary>
        </member>
        <member name="T:EGGEngine.Animation.MultiBlendController">
            <summary>
            An IAnimationController that blends an arbitrary number of other controllers together
            using the formula M_final = sum(weight_i * M_i)
            </summary>
        </member>
        <member name="M:EGGEngine.Animation.MultiBlendController.#ctor(Microsoft.Xna.Framework.Game)">
            <summary>
            Creates a new MultiBlendController
            </summary>
            <param name="game">The game.</param>
        </member>
        <member name="M:EGGEngine.Animation.MultiBlendController.GetCurrentBoneTransform(EGGEngine.Animation.BonePose)">
            <summary>
            Gets the current bone transform.
            </summary>
            <param name="pose">The pose.</param>
            <returns>The current transform of the bone.</returns>
        </member>
        <member name="M:EGGEngine.Animation.MultiBlendController.ContainsAnimationTrack(EGGEngine.Animation.BonePose)">
            <summary>
            Returns true if the controller can affect the bone.
            </summary>
            <param name="pose">The bone.</param>
            <returns>True if the controller can affect the bone.</returns>
        </member>
        <member name="P:EGGEngine.Animation.MultiBlendController.ControllerWeightDictionary">
            <summary>
            Gets a dictionary that maps controllers to their weights.
            </summary>
        </member>
        <member name="E:EGGEngine.Animation.MultiBlendController.AnimationTracksChanged">
            <summary>
            Fired when different bones can be affected by the controller.
            </summary>
        </member>
        <member name="T:EGGEngine.Animation.IModelViewerCamera">
            <summary>
            A camera for interfacing with the ModelViewer
            </summary>
        </member>
        <member name="M:EGGEngine.Animation.IModelViewerCamera.Update(Microsoft.Xna.Framework.GameTime)">
            <summary>
            Updates the camera.
            </summary>
            <param name="gameTime">The game time.</param>
        </member>
        <member name="P:EGGEngine.Animation.IModelViewerCamera.ModelWorld">
            <summary>
            The world matrix of the model that is being viewed.
            </summary>
        </member>
        <member name="P:EGGEngine.Animation.IModelViewerCamera.View">
            <summary>
            The view matrix of the camera.
            </summary>
        </member>
        <member name="P:EGGEngine.Animation.IModelViewerCamera.Projection">
            <summary>
            The projection matrix used by the camera.
            </summary>
        </member>
        <member name="T:EGGEngine.Animation.DefaultModelViewerCamera">
            <summary>
            The default camera used by the model viewer.
            </summary>
        </member>
        <member name="M:EGGEngine.Animation.DefaultModelViewerCamera.#ctor(Microsoft.Xna.Framework.Game,Microsoft.Xna.Framework.Graphics.Model)">
            <summary>
            Creates a new instance of the default model viewer camera.
            </summary>
            <param name="game">The game.</param>
            <param name="model">The model to view.</param>
        </member>
        <member name="M:EGGEngine.Animation.DefaultModelViewerCamera.Update(Microsoft.Xna.Framework.GameTime)">
            <summary>
            Updates the model view camera
            </summary>
            <param name="gameTime">The time passed</param>
        </member>
        <member name="P:EGGEngine.Animation.DefaultModelViewerCamera.ModelWorld">
            <summary>
            The world matrix of the model being viewed.
            </summary>
        </member>
        <member name="P:EGGEngine.Animation.DefaultModelViewerCamera.View">
            <summary>
            The view matrix of the camera.
            </summary>
        </member>
        <member name="P:EGGEngine.Animation.DefaultModelViewerCamera.Projection">
            <summary>
            The projection matrix used by the camera.
            </summary>
        </member>
        <member name="T:EGGEngine.Animation.ModelViewer">
            <summary>
            A viewer animated models.
            </summary>
        </member>
        <member name="M:EGGEngine.Animation.ModelViewer.#ctor(Microsoft.Xna.Framework.Game,Microsoft.Xna.Framework.Graphics.Model)">
            <summary>
            Creates a new instance of ModelViewer.
            </summary>
            <param name="game">The game to which the viewer will be attached.</param>
            <param name="model">The model to view.</param>
        </member>
        <member name="M:EGGEngine.Animation.ModelViewer.Add(Microsoft.Xna.Framework.Graphics.Model)">
            <summary>
            Adds a model to the viewer.
            </summary>
            <param name="model">The model to add.</param>
        </member>
        <member name="M:EGGEngine.Animation.ModelViewer.Update(Microsoft.Xna.Framework.GameTime)">
            <summary>
            Updates the ModelViewer.
            </summary>
            <param name="gameTime">The GameTime.</param>
        </member>
        <member name="P:EGGEngine.Animation.ModelViewer.Animator">
            <summary>
            Gets the animator that animates the model for this viewer.
            </summary>
        </member>
        <member name="P:EGGEngine.Animation.ModelViewer.Camera">
            <summary>
            Gets or sets the camera used by the viewer.
            </summary>
        </member>
        <member name="M:EGGEngine.Rendering.UIRenderer.#ctor(Microsoft.Xna.Framework.Graphics.Texture2D,Microsoft.Xna.Framework.Game)">
            <summary>
            Create user interface renderer
            </summary>
            
        </member>
        <member name="M:EGGEngine.Rendering.UIRenderer.Dispose">
            <summary>
            Dispose
            </summary>
        </member>
        <member name="M:EGGEngine.Rendering.UIRenderer.Dispose(System.Boolean)">
            <summary>
            Dispose
            </summary>
            <param name="disposing">Disposing</param>
        </member>
        <member name="M:EGGEngine.Rendering.UIRenderer.Update(Microsoft.Xna.Framework.GameTime)">
            <summary>
            Updates
            </summary>
            <param name="gameTime">The current game time</param>
        </member>
        <member name="M:EGGEngine.Rendering.UIRenderer.PrepareRenderer">
            <summary>
            Draws the frame counter to the screen
            </summary>
        </member>
        <member name="M:EGGEngine.Rendering.Shaders.PostProcessing.InitPostProcessingVertices">
            <summary>
            Sets up the vertices that cover the viewport
            </summary>
        </member>
        <member name="M:EGGEngine.Rendering.Shaders.PostProcessing.LoadEffect(Microsoft.Xna.Framework.Content.ContentManager,System.String)">
            <summary>
            Loads the appropriate effect
            </summary>
            <param name="content">Content manager needed to load the appropriate effect</param>
            <param name="filename">The name of the file containing the effect</param>
        </member>
        <member name="M:EGGEngine.Rendering.Shaders.PostProcessing.PostProcess(System.String)">
            <summary>
            Runs the appropriate postprocess technique
            </summary>
            <param name="technique">The technique that is to be run</param>
        </member>
        <member name="M:EGGEngine.Rendering.Shaders.PostProcessing.PostProcess(System.String,System.Single)">
            <summary>
            Runs the given technique for postprocessing and sets the time if needed
            </summary>
            <param name="technique">The technique that is to be run</param>
            <param name="time">The time parameter used for the change over time effect</param>
        </member>
        <member name="M:EGGEngine.Utils.SerializeUtils`1.LoadData(Microsoft.Xna.Framework.Storage.StorageDevice,System.String)">
            <summary>
            Loads the data of the specified file.
            </summary>
            <param name="storageDevice">Storage device that contains the data</param>
            <param name="fileName">Name of the file being loaded</param>
        </member>
        <member name="M:EGGEngine.Utils.SerializeUtils`1.SaveData(Microsoft.Xna.Framework.Storage.StorageDevice,System.String)">
            <summary>
            Saves data to the specified file.
            </summary>
            <param name="storageDevice">The storage device containing the data</param>
            <param name="fileName">Name of the file being saved</param>
        </member>
        <member name="T:EGGEngine.Animation.SkinInfo">
            <summary>
            A structure that contains information for a bindpose skin offset.
            Represents the inverse bind pose for a bone.
            </summary>
        </member>
        <member name="M:EGGEngine.Animation.SkinInfo.#ctor(System.String,Microsoft.Xna.Framework.Matrix,System.Int32,System.Int32)">
            <summary>
            Creates a new SkinInfo.
            </summary>
            <param name="name">The name of the bone attached to the transform.</param>
            <param name="inverseBindPoseTransform">The inverse bind pose transform for the bone.</param>
            <param name="paletteIndex">The index in the MatrixPalette for the bone.</param>
            <param name="boneIndex">The index of the bone.</param>
        </member>
        <member name="F:EGGEngine.Animation.SkinInfo.BoneName">
            <summary>
            The name of the bone attached to the transform.
            </summary>
        </member>
        <member name="F:EGGEngine.Animation.SkinInfo.InverseBindPoseTransform">
            <summary>
            The transform for the bone.
            </summary>
        </member>
        <member name="F:EGGEngine.Animation.SkinInfo.PaletteIndex">
            <summary>
            The index in the MatrixPalette for the bone.
            </summary>
        </member>
        <member name="F:EGGEngine.Animation.SkinInfo.BoneIndex">
            <summary>
            The index of the bone.
            </summary>
        </member>
        <member name="T:EGGEngine.Animation.SkinInfoCollection">
            <summary>
            A collection of SkinInfo objects.
            </summary>
        </member>
        <member name="M:EGGEngine.Animation.SkinInfoCollection.FromModel(Microsoft.Xna.Framework.Graphics.Model)">
            <summary>
            Finds the skinning info for the model and calculates the inverse
            reference poses required for animation.
            </summary>
            <param name="model">The model that contains the skinning info.</param>
            <returns>A collection of SkinInfo objects.</returns>
        </member>
        <member name="M:EGGEngine.Animation.Content.AnimationReader.Read(Microsoft.Xna.Framework.Content.ContentReader,EGGEngine.Animation.AnimationInfoCollection)">
            <summary>
            Reads in an XNB stream and converts it to a ModelInfo object
            </summary>
            <param name="input">The stream from which the data will be read</param>
            <param name="existingInstance">Not used</param>
            <returns>The unserialized ModelAnimationCollection object</returns>
        </member>
    </members>
</doc>
